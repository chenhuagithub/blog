<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

    <!-- 配置shiro的核心securityManager -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <!--<property name="sessionMode" value="native"/>-->
<!--        <property name="realm" ref="jdbcRealm"/>-->
        <property name="authenticator" ref="authenticator"></property>
        <property name="realms">
            <list>
                <ref bean="jdbcRealm"/>
                <ref bean="secondRealm"/>
            </list>
        </property>
    </bean>

    <!-- 配置ehcache缓存 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>


    <!-- 配置验证器 -->
    <!--
        • AuthenticationStrategy 接口的默认实现:
        • FirstSuccessfulStrategy:只要有一个 Realm 验证成功即可,只返回第一个 Realm 身份验证成功的认证信息,其他的忽略;
        • AtLeastOneSuccessfulStrategy:只要有一个Realm验证成功即可,和FirstSuccessfulStrategy 不同,将返回所有Realm身份验证成功的认证信息;
        • AllSuccessfulStrategy:所有Realm验证成功才算成功,且返回所有Realm身份验证成功的认证信息,如果有一个失败就失败了。
        • ModularRealmAuthenticator 默认是 AtLeastOneSuccessfulStrategy策略
    -->
    <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <property name="realms">
            <list>
                <ref bean="jdbcRealm"/>
                <ref bean="secondRealm"/>
            </list>
        </property>
<!--         认证策略 -->
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
        </property>
    </bean>

    <!-- 配置shiro的重要的元素Reaml(验证的数据源)，可自定义 -->
    <bean id="jdbcRealm" class="com.atguigu.utils.ShiroRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <!-- 指定加密算法 -->
                <property name="hashAlgorithmName" value="MD5"></property>
                <!-- 指定加密次数 -->
                <property name="hashIterations" value="1024"></property>
            </bean>
        </property>
    </bean>

    <!-- 配置shiro的重要的元素Reaml(验证的数据源)，可自定义 -->
    <bean id="secondRealm" class="com.atguigu.utils.SecondRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <!-- 指定加密算法 -->
                <property name="hashAlgorithmName" value="SHA1"></property>
                <!-- 指定加密次数 -->
                <property name="hashIterations" value="1024"></property>
            </bean>
        </property>
    </bean>

    <!-- 配置shiro中bean生命周期管理器 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- AOP式方法级权限检查 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- shiro过滤器配置，与web.xml中shiro过滤器同名 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!-- 需要登录成功后跳转的页面 -->
        <property name="loginUrl" value="/login.jsp"/>
        <!-- 登录成功后跳转的页面 -->
        <property name="successUrl" value="/list.jsp"/>
        <!-- 访问未授权页面跳转的页面 -->
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
        <property name="filterChainDefinitionMap" ref="filterChainDefinitionsMap"></property>
<!--        <property name="filterChainDefinitions" >-->
<!--            &lt;!&ndash; 静态资源需要设置为anon，否则找不到 &ndash;&gt;-->
<!--            &lt;!&ndash;-->
<!--                anon: 可以匿名访问-->
<!--                authc: 必须认证(即登录)后才能访问-->
<!--                logout: 登出-->
<!--            &ndash;&gt;-->
<!--            <value>-->
<!--&lt;!&ndash;                /statics/** = anon&ndash;&gt;-->
<!--                /login.jsp = anon-->
<!--                /hello = anon-->
<!--                /logout = logout-->
<!--                /user.jsp = roles[user]-->
<!--                /admin.jsp = roles[admin]-->
<!--&lt;!&ndash;                /user.jsp = authc&ndash;&gt;-->
<!--                /** = authc-->
<!--&lt;!&ndash;                /welcom.jsp = authc&ndash;&gt;-->
<!--            </value>-->
<!--        </property>-->
    </bean>

    <bean id="filterChainDefinitionsMap" factory-bean="filterChaindefinitionMapBuilder" factory-method="buildFilterDefinitionMap"></bean>

    <bean id="filterChaindefinitionMapBuilder" class="com.atguigu.factory.FilterChaindefinitionMapBuilder"></bean>
</beans>